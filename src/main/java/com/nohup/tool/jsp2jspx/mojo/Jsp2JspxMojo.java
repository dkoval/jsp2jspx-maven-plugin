package com.nohup.tool.jsp2jspx.mojo;

import com.nohup.tool.jsp2jspx.Jsp2JspxFailureException;
import com.nohup.tool.jsp2jspx.Jsp2JspxToolAssistant;
import com.nohup.tool.jsp2jspx.transformation.Jsp2JspxTool;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.codehaus.plexus.util.ReaderFactory;
import org.codehaus.plexus.util.StringUtils;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.regex.Pattern;

/**
 * Parses JSP pages and converts them to JSP documents, i.e. JSPs in well-formed XML syntax.
 *
 * @author Dmytro Koval
 * @goal jsp2jspx
 */
public class Jsp2JspxMojo extends AbstractJspProcessingMojo {

    /**
     * The regular expression representing JSP-related file paths.
     */
    private static final Pattern JSP_FILE_PATH_PATTERN = Pattern.compile("\\.(?:(jspf?)|(tag))$");

    /**
     * The base directory where the JSP pages are located.
     *
     * @parameter expression="${jsp2jspx.sourceDirectory}" default-value="${project.basedir}/src/main/webapp/WEB-INF/jsp"
     */
    private File sourceDirectory;

    /**
     * The directory where the files generated by Jsp2Jspx tool will be stored.
     *
     * @parameter expression="${jsp2jspx.outputDirectory}" default-value="${project.build.directory}/generated-sources/jspx"
     */
    private File outputDirectory;

    /**
     * Specifies the encoding set for JSP files. If not specified, the <code>inputEncoding</code> value will be
     * <code>UTF-8</code>.
     * <p>
     * <p>
     * See <a href="http://download.oracle.com/javase/1.5.0/docs/api/index.html?java/nio/charset/Charset.html">java.nio.charset.Charset.</a>
     * </p>
     *
     * @parameter expression="${jsp2jspx.inputEncoding}"
     */
    private String inputEncoding;

    /**
     * Specifies the encoding for the generated JSPX files. If not specified, the <code>outputEncoding</code> value will
     * be the value of the <code>inputEncoding</code> attribute.
     * <p>
     * <p>
     * See <a href="http://download.oracle.com/javase/1.5.0/docs/api/index.html?java/nio/charset/Charset.html">java.nio.charset.Charset.</a>
     * </p>
     *
     * @parameter expression="${jsp2jspx.outputEncoding}"
     */
    private String outputEncoding;

    /**
     * Assists Jsp2Jspx tool in resolving file paths to dependent resources.
     */
    private final Jsp2JspxToolAssistant assistant = new Jsp2JspxToolAssistantImpl();

    /**
     * Whether or not to allow <code>Jsp2JspxTool</code> to detect recursion in attributes while processing JSP elements.
     *
     * @parameter expression="${jsp2jspx.detectRecursionInAttributes}" default-value="false"
     */
    private boolean detectRecursionInAttributes = false;

    @Override
    public File getSourceDirectory() {
        return this.sourceDirectory;
    }

    /**
     * Gets the absolute path to the directory where the generated
     * JSP documents (JSPXs) will be stored.
     *
     * @return The absolute path to the directory where the generated JSP documents (JSPXs) by the parser will be stored,
     * never <code>null</code>.
     */
    public File getOutputDirectory() {
        return this.outputDirectory;
    }

    /**
     * @return the <code>inputEncoding</code> attribute or <code>UTF-8</code> if empty.
     */
    private String getInputEncoding() {
        return StringUtils.isEmpty(inputEncoding) ? ReaderFactory.UTF_8 : inputEncoding;
    }

    /**
     * @return the <code>outputEncoding</code> attribute or the value of {@link #getInputEncoding()} if empty.
     */
    private String getOutputEncoding() {
        return StringUtils.isEmpty(outputEncoding) ? getInputEncoding() : outputEncoding;
    }

    /**
     * Constructs a JSPX file path from a given JSP file path. The algorithm is as follows:
     * <p>
     * <p>
     * If a JSP file extension is either ".jsp" or ".jspf", or ".tag", it will be substituted with
     * ".jspx" | ".jspfx" | ".tagx" extension respectively, otherwise the default ".xml" will be added to the end of
     * <code>jspFilePath</code>.
     * </p>
     *
     * @param jspFilePath a JSP file path from which a JSPX file path will be constructed.
     * @return a JSPX file path.
     */
    private String constructJspxFilePath(String jspFilePath) {
        String newPath = JSP_FILE_PATH_PATTERN.matcher(jspFilePath).replaceFirst(".$1x");
        if (newPath.equals(jspFilePath)) {
            newPath = newPath + ".xml";
        }
        return newPath;
    }

    /**
     * Creates an output file.
     *
     * @param outputFilePath An output file path. If <code>outputFilePath</code> is relative, its absolute path will be
     *                       resolved against ${jsp2jspx.outputDirectory} directory.
     * @return An output <code>File</code>.
     * @throws IOException If the output file is unable to be created along with all parent directories.
     */
    private File createOutputFile(String outputFilePath) throws IOException {
        File file = new File(getOutputDirectory(), outputFilePath);
        File dir = file.getParentFile();
        if (dir != null && !dir.exists()) {
            if (!dir.mkdirs()) {
                throw new IOException("Failed to create output directory: " + dir.getPath());
            }
        }
        return file;
    }

    /**
     * A convenience implementation of the {@link Jsp2JspxToolAssistant} interface.
     */
    private final class Jsp2JspxToolAssistantImpl implements Jsp2JspxToolAssistant {

        public String resolveJspxFilePath(String jspFilePath) {
            return constructJspxFilePath(jspFilePath);
        }
    }

    /**
     * Executes the mojo.
     *
     * @throws MojoExecutionException If an unexpected problem occurs.
     *                                Throwing this exception causes a  "BUILD ERROR" message to be displayed.
     * @throws MojoFailureException   If an expected problem (such as a compilation failure) occurs.
     *                                Throwing this exception causes a "BUILD FAILURE" message to be displayed.
     */
    public void execute() throws MojoExecutionException, MojoFailureException {
        String[] relativeJspFilePaths = scanForJspFiles();

        if (relativeJspFilePaths == null) {
            getLog().warn("Skipping non-existing source directory: " + getSourceDirectory());
            return;
        }

        getLog().info("Converting JSP -> JSPX. Please wait...");

        int succeeded = 0;
        for (String relativeJspFilePath : relativeJspFilePaths) {
            if (processJspFile(relativeJspFilePath)) {
                succeeded++;
            }
        }

        getLog().info("Sucessfully processed " + succeeded + " file(s) of a total of " + relativeJspFilePaths.length);

        if (succeeded != relativeJspFilePaths.length) {
            getLog().info("See *.log files for more information regarding individual files");
        }
    }

    /**
     * Passes a JSP file through the mojo.
     *
     * @param relativeJspFilePath The relative to the ${jsp2jspx.sourceDirectory} directory path for a JSP file to be
     *                            processed, must not be <code>null</code> (e. g. pages/demo/HelloWorld.jsp).
     * @return <code>true</code> If processing is successful or <code>false</code>, otherwise.
     * @throws MojoExecutionException If processing of the JSP file failed.
     */
    private boolean processJspFile(String relativeJspFilePath) throws MojoExecutionException {
        boolean success = false;
        try {
            final File logFile = createOutputFile(relativeJspFilePath + ".log");
            final PrintStream logStream = new PrintStream(logFile);

            try {
                PrintStream stderr = System.err;

                try {
                    System.setErr(logStream);

                    try {
                        final File inputFile = new File(getSourceDirectory(), relativeJspFilePath);
                        final File outputFile = createOutputFile(constructJspxFilePath(relativeJspFilePath));

                        getLog().debug("Processing JSP file: " + inputFile.getPath());
                        final Jsp2JspxTool tool = new Jsp2JspxTool(inputFile, outputFile, getInputEncoding(),
                                getOutputEncoding(), this.assistant);
                        tool.setDetectRecursionInAttributes(this.detectRecursionInAttributes);
                        tool.convert();
                    } catch (Jsp2JspxFailureException e) {
                        getLog().error(e.getMessage());
                    } catch (IOException e) {
                        getLog().error(e.getMessage());
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                } finally {
                    System.setErr(stderr);
                }
            } finally {
                logStream.close();
                if (logFile.length() == 0) {
                    success = true;
                    logFile.delete();
                }
            }
        } catch (Throwable t) {
            throw new MojoExecutionException("Failed to process JSP file: " + relativeJspFilePath, t);
        }
        return success;
    }
}
